interface JobCard {
  file: string;
  name: string;
  model: string;
  inputs: string;
  resolution: string;
  thumbnail: string;
  scaleEnabled: boolean;
  channelEnabled: boolean;
  requiredChannels: string[];
  modelResolution: number;
  visualizer?: string;
}

const jobCards: { [jobType: string]: JobCard } = {
  segmentation: {
    file: 'nuclei/examples/HeLa_nuclear.png',
    name: 'Segmentation',
    model:
      'These models perform nuclear and/or whole-cell segmentation of cell culture data.',
    inputs: 'An image containing nuclear and/or whole-cell label channels.',
    resolution:
      'Segmentation expects data that is approximately 20X (0.65 μm/pixel).',
    thumbnail: 'thumbnails/HeLa_nuclear_color.png',
    scaleEnabled: true,
    channelEnabled: true,
    requiredChannels: [],
    modelResolution: 0.5,
  },
  caliban: {
    file: 'tiff_stack_examples/3T3_nuc_example_256.tif',
    name: 'Caliban',
    model:
      'Caliban segments and tracks nuclei over time and creates a lineage file with division information.',
    inputs:
      'A single-channel image stack of fluorescent nuclei (3D TIFF). Caliban expects data that is approximately 20X (0.65 μm/pixel).',
    resolution:
      'Caliban expects data that is approximately 20X (0.65 μm/pixel).',
    thumbnail: 'thumbnails/3T3_nuc_example_256.png',
    scaleEnabled: false,
    channelEnabled: false, // Caliban form does not have a channel form so this value doesn't matter
    requiredChannels: ['nuclei'],
    modelResolution: 0.5,
  },
  mesmer: {
    file: 'tiff_stack_examples/vectra_breast_cancer.tif',
    name: 'Mesmer',
    model: 'Mesmer performs whole-cell segmentation of multiplex tissue data.',
    inputs:
      'An image containing both a nuclear marker and a membrane/cytoplasm marker.',
    resolution: 'Mesmer expects data that is approximately 20X (0.5 μm/pixel).',
    thumbnail: 'thumbnails/breast_vectra.png',
    scaleEnabled: true,
    channelEnabled: true,
    requiredChannels: ['nuclei', 'cytoplasm'],
    modelResolution: 0.5,
    visualizer: 'viewer.deepcell.org',
  },
  polaris: {
    file: 'tiff_stack_examples/MERFISH_example_RGB.png',
    name: 'Polaris',
    model:
      'Polaris performs fluorescent spot detection and can assign spots to segmented cells.',
    inputs:
      'An image containing fluorescent spots generated by smFISH or similar assays. To segment tissue images, include a nuclear channel and a membrance/cytoplasm channel, or to segment cell culture, include a nuclear channel and/or a whole-cell channel. Pixel size of 0.1 μm recommended.',
    resolution:
      'Polaris expects data that is approximately 100X (0.1 μm/pixel).',
    thumbnail: 'thumbnails/MERFISH_example_RGB.jpeg',
    scaleEnabled: false,
    channelEnabled: false,
    requiredChannels: ['spots'],
    modelResolution: 0.1,
    visualizer: 'spots.deepcell.org',
  },
};

// TODO: this is a stop gap to support both multiplex and mesmer names
jobCards.multilplex = jobCards.mesmer;
// TODO: this is a stop gap to support both tracking and caliban names
jobCards.tracking = jobCards.caliban;

export default jobCards;
